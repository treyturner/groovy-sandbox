package info.treyturner.report_movie_genres


import groovy.util.logging.Slf4j
import groovyx.net.http.FromServer
import groovyx.net.http.HttpBuilder
import groovyx.net.http.OkHttpBuilder
import okhttp3.OkHttpClient

import static java.util.concurrent.TimeUnit.MINUTES

@Slf4j
class OmdbClient {

    static final String BASE_URI = "http://www.omdbapi.com"
    static final String API_KEY = System.getProperty('omdb.apiKey')
    static final Map BASE_QUERY = [apikey: API_KEY]

    static HttpBuilder http

    static {
        http = OkHttpBuilder.configure {
            client.clientCustomizer { OkHttpClient.Builder builder ->
                builder.connectTimeout(1, MINUTES)
                builder.readTimeout(1, MINUTES)
                builder.writeTimeout(1, MINUTES)
            }
            request.uri = BASE_URI
            request.uri.path = '/'
            request.uri.query = BASE_QUERY
        }
    }

    /**
     * Handles successful HTTP responses generated by http-builder-core
     * @param   fs              The FromServer object returned by the request method
     * @param   responseBody    The HTTP response responseBody
     */
    static Map handleSuccess(FromServer fs, Object responseBody) {
//        log.debug "Called $fs.uri"
//        log.debug "Response: $fs.statusCode $fs.message"
//        log.debug "Body:\n" + new JsonBuilder(responseBody).toPrettyString()
        [status: fs.statusCode, message: fs.message, body: responseBody]
    }

    /**
     * Handles failed HTTP responses generated by http-builder-core
     * @param   fs              The FromServer object returned by the request method
     * @param   responseBody    The HTTP response responseBody
     */
    static Map handleFailure(FromServer fs, Object responseBody) {
//        log.error "Called $fs.uri"
//        log.error "Response: $fs.statusCode $fs.message"
//        log.error "Body:\n" + new JsonBuilder(responseBody).toPrettyString()
        [status: fs.statusCode, message: fs.message, body: responseBody]
    }

    /**
     * Get data for a movie given it's title and optionally it's year
     * @param   title   The movie's title
     * @param   year    The year of the movie's release
     * @return          A Map containing OMDB's data on the found movie
     */
    static Map getMovie(String title, Integer year = null) {
        Map query = [t: title, type: 'movie']
        if (year) { query += [y: year] }
        http.post(Map) {
            request.uri.query = BASE_QUERY + query
            response.success { FromServer fs, Object responseBody ->
                handleSuccess(fs, responseBody)
            }
            response.failure { FromServer fs, Object responseBody ->
                handleFailure(fs, responseBody)
            }
        }.body as Map
    }

}
